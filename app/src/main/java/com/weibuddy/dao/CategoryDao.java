package com.weibuddy.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weibuddy.Category;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORY".
*/
public class CategoryDao extends AbstractDao<Category, String> {

    public static final String TABLENAME = "CATEGORY";

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Fid = new Property(1, String.class, "fid", false, "FID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Version = new Property(3, int.class, "version", false, "VERSION");
        public final static Property Fresh = new Property(4, int.class, "fresh", false, "FRESH");
        public final static Property ChildCount = new Property(5, int.class, "childCount", false, "CHILD_COUNT");
    }


    public CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"FID\" TEXT," + // 1: fid
                "\"NAME\" TEXT," + // 2: name
                "\"VERSION\" INTEGER NOT NULL ," + // 3: version
                "\"FRESH\" INTEGER NOT NULL ," + // 4: fresh
                "\"CHILD_COUNT\" INTEGER NOT NULL );"); // 5: childCount
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CATEGORY_FID ON CATEGORY" +
                " (\"FID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_CATEGORY_NAME ON CATEGORY" +
                " (\"NAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Category entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(2, fid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getVersion());
        stmt.bindLong(5, entity.getFresh());
        stmt.bindLong(6, entity.getChildCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(2, fid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getVersion());
        stmt.bindLong(5, entity.getFresh());
        stmt.bindLong(6, entity.getChildCount());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // version
            cursor.getInt(offset + 4), // fresh
            cursor.getInt(offset + 5) // childCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersion(cursor.getInt(offset + 3));
        entity.setFresh(cursor.getInt(offset + 4));
        entity.setChildCount(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Category entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Category entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Category entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
